@model FSMS.Models.ViewQuotationViewModel

@{
    ViewData["Title"] = "Details";
}

@section Styles{
    <style>
        .max-width-150 {
            max-width: 150px;
        }
    </style>
}

<div class="row">
    <div class="col-12">
        <!-- Main content -->
        <div class="invoice p-3 mb-3">
            <!-- title row -->
            <div class="row d-print-none">
                <div class="col-12">
                    <h4>
                        <i class="fas fa-globe"></i> Lean Aik Furniture
                    </h4>
                </div>
                <!-- /.col -->
            </div>
            <!-- Document Print Header-->
            <div class="row justify-content-center d-none d-print-block">
                <div class="col-auto">
                    <h4 class="text-center"><b>LEAN AIK FURNITURE</b></h4>
                    <h6 class="text-center">4995,TINGKAT BAWAH, JALAN NEW FERRY</h6>
                    <h6 class="text-center">12100 BUTTERWORTH, P. PINANG</h6>
                    <h6 class="text-center">Tel: (60) 12-454 3360, Fax: 04-1234567</h6>
                    <h6 class="text-center">Email:  info@leanaikfurniture.com</h6>
                </div>
            </div>
            <!-- info row -->
            <div class="row invoice-info">
                <div class="col-sm-4 invoice-col border-right">
                    From
                    @await Html.PartialAsync("_CustomerDetailPartiaView", Model.Merchant)
                </div>
                <!-- /.col -->
                <div class="col-sm-4 invoice-col border-right">
                    To
                    @await Html.PartialAsync("_CustomerDetailPartiaView", Model.Customer)
                </div>
                <!-- /.col -->
                <div class="col-sm-4 invoice-col">
                    <b>Quotation #@Model.SerialNo</b><br>
                    <br>
                    <b>Date:</b> @String.Format("{0:dd-MM-yyyy}", Model.Date).ToString()<br>
                    <b>Date Validity:</b> @String.Format("{0:dd-MM-yyyy}", Model.DueDate).ToString()<br>
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
            <br />
            <!-- Table row -->
            <div class="row">
                <div class="col-12 table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Serial #</th>
                                <th>Picture</th>
                                <th>Product</th>
                                <th>Qty</th>
                                <th>Unit Price(RM)</th>
                                <th>Subtotal(RM)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (Model.Stocks != null)
                                {
                                    var items = Model.Stocks;
                                    foreach (var item in (items))
                                    {
                                        <tr>
                                            <td>@item.Id</td>
                                            <td><img class="img-fluid img-thumbnail mx-auto max-width-150" src="~/@item.PictureUrl" /></td>
                                            <td>@item.Name <br />@item.Description</td>
                                            <td>@item.Quantity</td>
                                            <td>@item.UnitPrice</td>
                                            <td>@(item.Quantity * item.UnitPrice)</td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->

            <div class="row">
                <div class="col-6 offset-6">

                    <div class="table-responsive">
                        <table class="table">
                            <tr>
                                <th class="lead" style="border: 0;">Amount</th>
                            </tr>
                            <tr>
                                <th style="width:50%">Subtotal</th>
                                <td>RM @Model.Subtotal</td>
                            </tr>
                            <tr>
                                <th>Tax (6%)</th>
                                <td>RM @Model.Tax</td>
                            </tr>
                            <tr>
                                <th>Shipping Fee</th>
                                <td>RM @Model.ShippingFee</td>
                            </tr>
                            <tr>
                                <th>Total</th>
                                <td>RM @Model.Price</td>
                            </tr>
                        </table>
                    </div>
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
            <!-- this row will not appear when printing -->
            <div class="row no-print">
                <div class="col-12">
                    <form id="form-transfer-invoice" asp-action="TransferToInvoice" method="post">
                        <button type="button" class="btn btn-default" onclick="printPage()"><i class="fas fa-print"></i> Print</button>
                        <a href="@Url.Action("Edit", "Quotation", new { id = @Model.Id })" class="btn btn-warning"><i class="far fa-edit"></i> Edit Quotation</a>
                        <input type="hidden" asp-for="Id" /> 
                        <button type="submit" class="btn btn-primary float-right" style="margin-right: 5px;"><i class="fas fa-exchange-alt"></i> Transfer to Invoice</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /.invoice -->

@section Scripts{
    <script type="text/javascript">
        var TransferToInvoice = null;

        const _transferToInvoice = () => {
            var form = document.getElementById("form-transfer-invoice");

            const submitAlert = (e) => {
                e.preventDefault();
                Swal.fire({
                    title: '<strong><u>Attention</u></strong>',
                    icon: 'warning',
                    html:
                        'Are you sure you want to transfer this Quotation to Invoice? <br />' +
                        'All changes cannot be reverted',
                    showCancelButton: true,
                    focusConfirm: false,
                    confirmButtonText:
                        'Yes',
                    cancelButtonText:
                        'Cancel',
                }).then((data => {
                    if (data.value === true) {
                        form.submit();
                    }
                }))
            }

            const wireUpEvent = () => {
                form.addEventListener("submit", submitAlert);
            }

            const init = () => {
                wireUpEvent();
            }

            init();
        }

        const ready = (fn) => {
            if (document.readyState != 'loading') {
                fn();
            } else if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', fn);
            } else {
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState != 'loading')
                        fn();
                });
            }
        }

        const init = () => {
            TransferToInvoice = _transferToInvoice();
            @{
                if (TempData["Edit"] != null)
                {
                    @:Toast.fire({
                        @:icon: 'success',
                        @:title: 'Quotation updated successfully.'
                    @:})
                }

                if (TempData["Create"] != null)
                {
                    @:Toast.fire({
                        @:icon: 'success',
                        @:title: 'Quotation created successfully.'
                    @:})
                }
            }
        }

        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 5000
        });

        ready(init);
    </script>
}